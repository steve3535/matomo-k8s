variables:
    MARIADB_PASSWORD: ${MARIADB_PASSWORD}
    MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}

default:
  tags: 
    - k8s

stages:
    - validate-db-conf
    - deploy
    - validate-db

before_script:
    - |
      cat <<EOF >manifests/db/0-db-matomo-secrets.yaml 
      apiVersion: v1
      kind: Secret
      metadata:  
        name: db-matomo-secrets
        namespace: matomo 
      data:
          mariadb-password: $(echo -n "$MARIADB_PASSWORD" | base64)
          mariadb-root-password: $(echo -n "$MARIADB_ROOT_PASSWORD" | base64)
      EOF   

validate-db-conf:
  stage: validate-db-conf 
  script:
    - kubectl apply -f manifests/db/ --dry-run=client   

deploy-db:
  stage: deploy 
  script:
    - kubectl apply -f manifests/db/0-db-matomo-envs.yaml 
    - kubectl apply -f manifests/db/0-db-matomo-secrets.yaml 
    - kubectl apply -f manifests/db/1-db-matomo-pvc.yaml
    - kubectl apply -f manifests/db/2-db-matomo.yaml 
    - kubectl wait --for=condition=available deployment/db-matomo -n matomo 
    - kubectl apply -f manifests/db/3-db-matomo-svc.yaml  

validate-db-deployment:
  stage: validate-db
  script:
    - kubectl rollout status deployment db-matomo --timeout=5s

validate-db-service:
    stage: validate-db
    needs:
      - validate-db-deployment 
    script:
      - echo "Validating DB connection ..."
      - kubectl config set-context --namespace matomo --current      
      - |
        if kubectl run mariadb-client-${CI_JOB_ID} -i --image=bitnami/mariadb --rm --restart=Never -- \
        mysql -hdb-matomo -uroot -p${MARIADB_ROOT_PASSWORD} -e "select 1";then 
        echo "DB connection successful" 
        exit 0
        fi 
        echo "DB connection failed"
        exit 1          
